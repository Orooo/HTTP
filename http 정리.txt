[IP : 인터넷 프로토콜]
- 지정한 IP에 데이터 전달
- packet 이란 통신 단위로 데이터 전달


[IP 한계]
- 비연결성 : packet을 받을 대상이 없거나 서비스 불능 상태여도 packet 전송
- 비신뢰성 : 중간에 packet이 사라질 수 있음, packet이 순서대로 안 올 수 있음
- 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 어플리케이션이 둘 이상이면 구분을 못할 수 있음


[인터넷 프로토콜 스택의 4계층]
- 어플리케이션 계층 http, FTP
- 전송 계층 TCP, UDP
- 인터넷 계층 IP
- 네트워크 인터페이스 계층 (LAN드라이버)

1. 프로그램(web 브라우저 등) 이 메세지 생성
2. 소켓 라이브러리를 통해 전달
3. TCP 정보 생성, 메세지 데이터 포함
4. IP 패킷 생성, TCP 데이터 포함


[packet 정보]
- IP packet : 출발지 IP, 도착지 IP, 전송 데이터
- TCP/IP packet : 출발지 port, 목적지 port, 전송 제어, 순서, 검증 정보, 전송 데이터


[TCP 프로토콜]
- 전송 제어 프로토콜(Transmission Control Protocol)
- 연결지향 (TCP 3 way handshake-가상 연결)
- 데이터 전달 보증 (클라이언트와 서버 간 데이터 전송 송수신이 잘 되었다는 응답을 서로 받음)
- 순서 보장 (클라이언트에서 보낸 패킷의 순서가 이상하면 서버에서 다시 보내라고 요구, 그러면 클라이언트에서 다시 보냄) 
- 신뢰 가능한 프로토콜


[TCP 3 way handshake]
1. 클라이어니트 to 서버 : SYN (접속 요청), connect, 연결 과정
2. 서버 to 클라이언트 : SYN + ACK (요청 수락&데이터 전송)
3. 클라이언트 to 서버 : ACK


[UDP]
- 사용자 데이터그램 프로토콜(User Datagram Protocol)
- 하얀 종이 (기능 거의 X)
- 연결 지행인데 3 way handshake 는 아님
- 데이터 전달 보증 X
- 순서 보장 X
- 신뢰는 떨어져도, 단순해서 빠름
- IP에 PORT(여러 packet 신호 가운데에서 올바른 어플리케이션 구분 용도) + 체크섬(데이터가 제대로 왔는지 확인) 을 합친 느낌 


[PORT]
- ip가 아파트 단지 이름 이면, port는 몇 동 몇 호


[DNS]
- ip를 변경하지 못하기에, 도메인 명을 바꿀 수 있도록 dns 사용


[URI]
- Uniform Resource Identifier
- 로케이터(locator-URL, 리소서 위치), 이름(name-URN) 등으로 분류됨
- Uniform : 리소스를 식별하는 통일된 방식 / Resource : 자원, URI로 식별 가능한 모든 것
  Identifier : 다른 항목과 구분하는데 필요한 정보
- 위치는 변할 수 있지만, 이름은 변함 X


[HTTP]
- HyperText Transfer Protocol
- 클라이언트 서버 구조
- 무상태 프로토콜(스테이트리스), 비연결성
- http 메세지
- 단순, 확장 가능

@클라이언트 서버 구조
- Request Response 구조
- 클라이언트는 서버에 요청을 보내고, 응답을 대기
- 서버가 요청에 대한 결과를 만들어서 응답
- 클라이언트 혹은 서버의 프로그래밍 언어가 바뀌어도 서로 독립적이기에 영향X

@무상태 프로토콜
- 서버가 클라이언트의 이전 상태 보존X (매번 데이터를 추가하여 전송해야함)
- 서버 확장성 높음 (scale out - 수평 확장이 유리)
- 클라이언트가 추가 데이터를 전송

@@ Stateful vs Stateless 차이
1. 상태 유지 : 중간에 다른 서버로 바뀌면 안 됨 (바뀔 경우 이전 상태 정보를 다른 서버에 전달해야함)
2. 무상태 : 중간에 서버가 바뀌어도 됨
- 중간에 클라이언트가 증가해도 서버 증대 가능
- 응답 서버를 쉽게 변환 가능 => 무한한 서버 증설 가능
- 상태유지 ex) 로그인 기능, 브라우저 쿠키&서버 세션 등을 통해 상태 유지

@비연결성
- HTTP 는 연결을 유지하지 않는 모델
- 초 단위 이하의 빠른 속도로 응답
- 수 천명이 서비스를 사용하여도 사용자가 동시에 요청하는 경우는 수 십 개 정도기에 서버 자원의 효율성 증가 (수 천명 사용자의 상태 유지X)
- 매번 연결을 TCP/IP 연결을 새로 해야하기에, 3 way handshake 시간 증가


[HTTP 메세지]
@시작 라인 
1. 요청 메세지-HTTP 메소드
- 종류 : GET, POST, PUT, DELETE
- 서버가 수행해야 할 동작 지정 (GET : 리소스 조회, POST : 요청 내역 처리)

2. 요청 메세지 - 요청 대상
- absolute-path[?query] (절대경로[?쿼리])
- 절대경로="/" 로 시작하는 경로

3. 응답 메세지
- start-line = request-line / status-line
- status-line = HTTP-version SP status-code SP reason-phase CRLF
- HTTP 버전
- HTTP 상태 코드 : 요청 성공, 실패 를 나타냄
  (1) 200 : 성공
  (2) 400 : 클라이언트 요청 오류
  (3) 500: 서버 내부 오류
- 이유 구문 : 사람이 이해 가능한 상태 코드 설명 글


[HTTP 헤더]
- HTTP 전송에 필요한 모든 부가 정보
- ex) 메세지 body의 내용, 메세지 body의 크기-압축-인증-요청 클라이언트(브라우저) 정보, 서버 어플리케이션 정보, 캐시 관리 정보 등
- 표준 헤더가 너무 많음
- 필요시 임의의 헤더 추가 가능


[HTTP 메세지 바디]
- 실제 전송할 데이터
- HTML 문서-이미지-영상-JSON 등 byte로 표현 가능한 모든 데이터를 전송


[리소스와 행위를 분리]
- 리소스 식별이 핵심
- URI는 리소스만 식별
- 리소스와 해당 리소스를 대상으로 하는 '행위'를 분리
  (1) 리소스 : 회원
  (2) 행위 : CRUD
- 리소스는 동사, 행위는 동사


[HTTP 메소드]
1. 종류
(1) GET : 
- 리소스 조회
- 서버에 전달하고픈 데이터를 query를 통해 전달
- 메세지 body를 사용하여 데이터 전달이 가능하나, 지원하지 않는 곳이 많음

(2) POST : 
- 새 리소스 생성(등록) : 서버가 아직 식별하지 않은 new 리소스 생성
- 요청 데이터 처리 (주로 등록에 사용)
  = 데이터 생성-변경 등이 아닌 프로세스를 처리해야 할 경우 (ex, 주문 시 결제-배달-완료 의 프로세스)
  = POST 결과로 new 리소스가 안 만들어지기도 함
- 다른 메서드로 처리하기 어려운 경우, POST 사용
- HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
- 게시판, 블로그 등에 메세지 게시
- 기존 자원에 데이터 추가
- 리소스 URI에 POST 요청이 오면 정해진 규칙이 없기에, 요청 데이터를 어떻게 처리할 지 리소스 마다 따로 정해야 함.

(3) PUT : 리소스를 대체, 해당 리소스가 없으면 생성
(4) PATCH : 리소스 부분 변경
(5) DELETE : 리소스 삭제










