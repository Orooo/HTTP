[HTTP 메소드]
1. 종류
(1) GET : 
- 리소스 조회
- 서버에 전달하고픈 데이터를 query를 통해 전달
- 메세지 body를 사용하여 데이터 전달이 가능하나, 지원하지 않는 곳이 많음

(2) POST : 
- 새 리소스 생성(등록) : 서버가 아직 식별하지 않은 new 리소스 생성
- 요청 데이터 처리 (주로 등록에 사용)
  = 데이터 생성-변경 등이 아닌 프로세스를 처리해야 할 경우 (ex, 주문 시 결제-배달-완료 의 프로세스)
  = POST 결과로 new 리소스가 안 만들어지기도 함
- 다른 메서드로 처리하기 어려운 경우, POST 사용
- HTML 양식에 입력된 필드와 같은 데이터 블록을 데이터 처리 프로세스에 제공
- 게시판, 블로그 등에 메세지 게시
- 기존 자원에 데이터 추가
- 리소스 URI에 POST 요청이 오면 정해진 규칙이 없기에, 요청 데이터를 어떻게 처리할 지 리소스 마다 따로 정해야 함.

(3) PUT : 
- 리소스를 (완전히) 대체, 해당 리소스가 없으면 생성 (덮어버리는 특성)
- post 와 다르게, 클라이언트가 리소스 위치를 알고 URI를 지정

(4) PATCH : 리소스 부분 변경

(5) DELETE : 리소스 삭제



[안전 -  safe]
- 호출해도 리소스 변경 X


[멱등 - Idempotent]
- f(f(x)) = f(x)
- 한번 호출하든 몇 번을 호출하든 결과가 같음
- 멱등 메서드
  (1) GET : 몇 번을 조회해도 같은 결과가 조회
  (2) PUT : 결과를 대체하기에, 같은 요청을 여러번 하여도 최종 결과는 같음
  (3) DELETE : 삭제하면 삭제 결과는 같음
  ** (4) post 는 멱등이 아님. 여러 번 호출하면 같은 결제가 발생할 수 있기에
- 서버가 timeout 등으로 인해 정상 응답을 못 할 경우, 클라이언트가 같은 요청을 반복 가능한가에 대한 판단 근거


[캐시 가능 - Chacheable]
- GET, HEAD 를 캐시로 활용